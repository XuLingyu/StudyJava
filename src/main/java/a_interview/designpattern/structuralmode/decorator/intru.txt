装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，
同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。

这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。

我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。


对已有的业务逻辑进一步的封装，使其增加额外的功能，如Java中的IO流就使用了装饰者模式，用户在使用的时候，可以任意组装，达到自己想要的效果。
举个栗子，我想吃三明治，首先我需要一根大大的香肠，我喜欢吃奶油，在香肠上面加一点奶油，
再放一点蔬菜，最后再用两片面包夹一下，很丰盛的一顿午饭，营养又健康。

在《绝地求生：刺激战场》游戏里面我们都知道。
 Kar 98K有5发子弹；
 装上弹匣后有10发子弹；
 装上4倍镜后可以进行4倍瞄准；
 装上8倍镜后可以进行4倍瞄准、8倍瞄准。
